import time
import Adafruit_ADS1x15  # ADC library for analog sensors
import requests  # For sending data to cloud
import paho.mqtt.client as mqtt  # MQTT communication

# Initialize ADC (ADS1115)
adc = Adafruit_ADS1x15.ADS1115()
GAIN = 1  # ADC Gain (adjust based on sensor range)

# Define Cloud/MQTT Configuration
MQTT_BROKER = "broker.hivemq.com"  # Use your MQTT broker
MQTT_TOPIC = "river/water_quality"

# Define sensor reading functions
def read_ph():
    value = adc.read_adc(0, gain=GAIN)
    ph = (value * 5.0) / 1024  # Convert ADC value to voltage, then to pH
    return round(ph, 2)

def read_turbidity():
    value = adc.read_adc(1, gain=GAIN)
    turbidity = (value / 1024.0) * 100  # Convert to percentage
    return round(turbidity, 2)

def read_dissolved_oxygen():
    value = adc.read_adc(2, gain=GAIN)
    do = (value * 5.0) / 1024 * 10  # Approximate conversion
    return round(do, 2)

def read_tds():
    value = adc.read_adc(3, gain=GAIN)
    tds = value / 1024 * 500  # Convert ADC value to TDS ppm
    return round(tds, 2)

def read_heavy_metals():
    # Assume digital sensor gives 1 for presence, 0 for absence
    heavy_metal_detected = 1  # Replace with GPIO.input(pin) for actual sensor
    return "Detected" if heavy_metal_detected else "Safe"

# Send data to cloud
def send_data():
    data = {
        "pH": read_ph(),
        "Turbidity (%)": read_turbidity(),
        "Dissolved Oxygen (mg/L)": read_dissolved_oxygen(),
        "TDS (ppm)": read_tds(),
        "Heavy Metals": read_heavy_metals(),
    }
    print("Sending Data:", data)

    # HTTP POST Request (to a cloud server)
    try:
        requests.post("http://your-server.com/data", json=data)
    except Exception as e:
        print("HTTP Error:", e)

    # MQTT Publish
    try:
        client = mqtt.Client()
        client.connect(MQTT_BROKER, 1883, 60)
        client.publish(MQTT_TOPIC, str(data))
        client.disconnect()
    except Exception as e:
        print("MQTT Error:", e)

# Main Loop
if __name__ == "__main__":
    while True:
        send_data()
        time.sleep(60)  # Send data every 60 seconds
